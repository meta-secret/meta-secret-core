version: '3'

# This Taskfile demonstrates the complete Meta Secret workflow in sequence.
# The numbered tasks (1-10) indicate the order of operations in the secret
# sharing and recovery process. Run 'task run-all' to execute the entire workflow.

vars:
  RELEASE_DIR: ../../target/release
  VAULT_NAME:
    sh: head -c 8 /dev/urandom | xxd -p
  PASS_NAME: test_pass
  PASSWORD: p_ass_word
  META_CLI_A: a/meta-cli
  META_CLI_B: b/meta-cli
  META_CLI_C: c/meta-cli

tasks:
  check-dependencies:
    desc: Check if required dependencies are installed
    cmds:
      - |
        DEPS="{\"dependencies\":["
        if ! command -v jq &> /dev/null; then
          DEPS="$DEPS{\"name\":\"jq\",\"installed\":false}"
          exit 1
        else
          DEPS="$DEPS{\"name\":\"jq\",\"installed\":true}"
        fi
        DEPS="$DEPS]}"
        echo "$DEPS" | jq .

  init:
    desc: Create working directories
    deps: [check-dependencies]
    cmds:
      - mkdir -p a b c

  build:
    desc: 1. Build meta-cli applications
    deps: [init]
    cmds:
      - cargo build --release
      - cp {{.RELEASE_DIR}}/meta-cli {{.META_CLI_A}}
      - cp {{.RELEASE_DIR}}/meta-cli {{.META_CLI_B}}
      - cp {{.RELEASE_DIR}}/meta-cli {{.META_CLI_C}}

  device:
    desc: 2. Initialize devices with unique names
    deps: [build]
    cmds:
      - cd a && ./meta-cli init device --device-name=device_a
      - cd b && ./meta-cli init device --device-name=device_b
      - cd c && ./meta-cli init device --device-name=device_c

  user:
    desc: 3. Initialize users with the same vault name
    deps: [device]
    cmds:
      - cd a && ./meta-cli init user --vault-name={{.VAULT_NAME}}
      - cd b && ./meta-cli init user --vault-name={{.VAULT_NAME}}
      - cd c && ./meta-cli init user --vault-name={{.VAULT_NAME}}

  sign-up:
    desc: 4. Sign up all users - first user creates a new vault, others send join requests
    deps: [user]
    cmds:
      - cd a && ./meta-cli auth sign-up
      - cd b && ./meta-cli auth sign-up
      - cd c && ./meta-cli auth sign-up

  accept-all-join-requests:
    desc: 5. Device A accepts all join requests
    deps: [sign-up]
    cmds:
      - cd a && ./meta-cli auth accept-all-join-requests

  device-a-info:
    desc: 6. Display device A vault information (it must be a vault with 3 members)
    deps: [accept-all-join-requests]
    cmds:
      - cd a && ./meta-cli info

  split:
    desc: 7. Split secret on device A and sync with others
    deps: [device-a-info]
    cmds:
      - cd a && echo {{.PASSWORD}} | ./meta-cli secret split --pass-name={{.PASS_NAME}} --stdin
      - cd b && ./meta-cli info # download secret share
      - cd c && ./meta-cli info # download secret share

  send-recovery-request:
    desc: 8. Device A sends recovery request
    deps: [split]
    cmds:
      - cd a && ./meta-cli secret recovery-request --pass-name={{.PASS_NAME}}

  accept-recovery-request:
    desc: 9. Other devices accept recovery request
    deps: [send-recovery-request]
    cmds:
      - cd b && ./meta-cli secret accept-all-recovery-requests && ./meta-cli info
      - cd c && ./meta-cli secret accept-all-recovery-requests && ./meta-cli info
      - cd a && ./meta-cli info

  show-secret:
    desc: 10. Show recovered secret!
    deps: [accept-recovery-request]
    cmds:
      - |
        cd a && \
        RECOVERY_CLAIMS=$(./meta-cli --output-format=json info recovery-claims) && \
        CLAIM_ID=$(echo "$RECOVERY_CLAIMS" | jq -r '.claims[0].id') && \
        PASS_NAME=$(echo "$RECOVERY_CLAIMS" | jq -r '.claims[0].password') && \
        if [ -z "$CLAIM_ID" ]; then
          echo "Error: No recovery claims found."
          exit 1
        fi && \
        SECRET_RESULT=$(./meta-cli --output-format=json secret show --claim-id=$CLAIM_ID) && \
        SECRET=$(echo "$SECRET_RESULT" | jq -r '.secret') && \
        echo "Secret successfully recovered: $SECRET"
      - echo "Secret recovery demonstration completed successfully!"

  run-all:
    desc: Run entire demo sequence
    deps: [clean, show-secret]

  clean:
    desc: Clean all generated files
    cmds:
      - rm -rf a/meta-secret.redb b/meta-secret.redb c/meta-secret.redb
      - rm -f {{.META_CLI_A}} {{.META_CLI_B}} {{.META_CLI_C}} 