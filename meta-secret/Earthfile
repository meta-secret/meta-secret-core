VERSION 0.8
FROM scratch
ENV RUST_VERSION="1.86.0"

generate-cargo-chef-recipe:
    FROM lukemathwalker/cargo-chef:latest-rust-${RUST_VERSION}-bookworm
    COPY . .
    RUN cargo chef prepare --recipe-path recipe.json
    SAVE ARTIFACT recipe.json AS LOCAL recipe.json

builder:
    FROM rust:${RUST_VERSION}-bookworm

    RUN rustup component add rustfmt

    # Install sccache (cargo is too slow)
    ENV SCCACHE_VERSION="v0.10.0"
    ENV SCCACHE_ARTIFACT=sccache-${SCCACHE_VERSION}-x86_64-unknown-linux-musl
    ENV SCCACHE_BUNDLE=${SCCACHE_ARTIFACT}.tar.gz
    #RUN cargo install sccache@${SCCACHE_VERSION}
    ENV RUSTC_WRAPPER=sccache

    RUN wget https://github.com/mozilla/sccache/releases/download/${SCCACHE_VERSION}/${SCCACHE_BUNDLE} \
        && tar xzf ${SCCACHE_BUNDLE} \
        && mv ${SCCACHE_ARTIFACT}/sccache /usr/local/bin/sccache \
        && chmod +x /usr/local/bin/sccache

    # Install cargo-chef
    RUN cargo install cargo-chef --locked

    #RUN cargo install wasm-pack slooooow
    RUN cargo install wasm-pack --version 0.13.1 --locked

    # Install diesel_cli if not already available
    RUN cargo install diesel_cli --no-default-features --features sqlite

    # Cache dependencies with cargo chef
    ENV BASE_DIR="/meta-secret-build"
    WORKDIR ${BASE_DIR}
    COPY recipe.json .
    RUN cargo chef cook --release --recipe-path recipe.json

prepare-db:
    FROM +builder

    ENV BASE_DIR="/meta-secret-build"
    WORKDIR ${BASE_DIR}
    
    # Create db directory and run migrations
    RUN mkdir -p db
    COPY db ./db
    
    # Set database URL and run migrations
    ENV SQLITE_DIR=${BASE_DIR}/db/sqlite

    RUN mkdir -p ${SQLITE_DIR}/build
    WORKDIR ${SQLITE_DIR}

    ENV DATABASE_URL=build/meta-secret.db
    RUN diesel migration run
    
    SAVE ARTIFACT ${SQLITE_DIR}/build

meta-server-builder:
    FROM +builder

    ENV BASE_DIR="/meta-secret-build"
    WORKDIR ${BASE_DIR}
    COPY . .

    WORKDIR meta-server/web-server

    RUN cargo build --release
    SAVE ARTIFACT ${BASE_DIR}/target

###
# To run meta server:
# earthly +build-meta-server-image && docker run -ti --rm -p 3000:3000 cypherkitty/meta-secret-server:latest
###
build-meta-server-image:
    FROM debian:bookworm

    RUN apt update && apt install -y ca-certificates curl iputils-ping sqlite3

    WORKDIR /meta-secret

    COPY +meta-server-builder/target/release/meta-server .
    COPY +prepare-db/build/meta-secret.db ./meta-secret.db

    EXPOSE 3000

    CMD ./meta-server
    SAVE IMAGE --push cypherkitty/meta-secret-server:latest


wasm-build:
    FROM +builder

    WORKDIR /meta-secret-build

    # Copy all source files first
    COPY . .

    # Then build the wasm package
    WORKDIR wasm
    RUN wasm-pack build --target web
    SAVE ARTIFACT pkg

wasm-build-local:
    FROM +wasm-build
    SAVE ARTIFACT pkg AS LOCAL web-cli/ui/pkg

web-build:
    FROM node:23.9.0-bookworm

    ENV PROJECT_DIR=/meta-secret
    ENV WEB_CLI_DIR=web-cli
    ENV UI_DIR=${WEB_CLI_DIR}/ui

    # Cache npm dependencies
    WORKDIR ${PROJECT_DIR}/${UI_DIR}

    COPY ${UI_DIR}/package.json .
    RUN npm install && npm install --dev

    COPY +wasm-build/pkg ./pkg

    WORKDIR ${PROJECT_DIR}/${WEB_CLI_DIR}
    COPY ${WEB_CLI_DIR} .

    WORKDIR ${PROJECT_DIR}/${UI_DIR}
    RUN --no-cache npm install && npm run build
    EXPOSE 5173

    SAVE IMAGE --push cypherkitty/meta-secret-web:latest

web-run:
    LOCALLY
    WITH DOCKER --load=+web-build
        RUN docker run --rm -p 5173:5173 cypherkitty/meta-secret-web:latest npm run dev -- --host 0.0.0.0
    END


test:
    FROM +builder
    ENV BASE_DIR="/meta-secret-build"
    WORKDIR ${BASE_DIR}

    RUN cargo install --locked cargo-nextest

    COPY . .

    RUN cargo nextest run --profile ci

android-lib-builder:
    FROM rust:${RUST_VERSION}-bookworm
    
    # Install required dependencies for Android build
    RUN apt update && apt install -y \
        curl \
        unzip \
        openjdk-17-jdk \
        build-essential \
        cmake \
        ninja-build \
        git \
        pkg-config \
        libssl-dev

    # Set up environment variables
    ENV ANDROID_HOME=/opt/android-sdk
    ENV ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/25.2.9519653
    ENV PATH=${ANDROID_HOME}/cmdline-tools/latest/bin:${PATH}
    
    # Install Android SDK
    RUN mkdir -p ${ANDROID_HOME}/cmdline-tools && \
        cd ${ANDROID_HOME}/cmdline-tools && \
        curl -O https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip && \
        unzip commandlinetools-linux-9477386_latest.zip && \
        mv cmdline-tools latest && \
        rm commandlinetools-linux-9477386_latest.zip
    
    # Accept licenses and install NDK
    RUN yes | sdkmanager --licenses && \
        sdkmanager "ndk;25.2.9519653" "platform-tools" "platforms;android-33"
    
    RUN cargo install cargo-ndk
    RUN rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android

    WORKDIR /meta-secret-build
    
    # Copy the source code
    COPY . .

build-android-lib:
    FROM +android-lib-builder
    
    WORKDIR /meta-secret-build/mobile/ios
    
    # Build the .so libraries for all targets
    RUN cargo ndk --platform 25 --target x86_64-linux-android build
    
    # Create the output directory
    #RUN mkdir -p /output/libs/android
    
    #SAVE ARTIFACT /output/libs/android AS LOCAL meta-secret/mobile/libs/android
