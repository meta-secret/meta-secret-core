openapi: 3.0.2
info:
  title: Meta Secret Core Models
  version: 1.0.0

x-cargo-authors:
  - MetaBynull <metabynull@meta-secret.org>

components:
  schemas:
    Base64EncodedText:
      type: object
      required:
        - base64Text
      properties:
        base64Text:
          type: string
    DeviceInfo:
      type: object
      required:
        - deviceId
        - deviceName
      properties:
        deviceId:
          type: string
          minLength: 1
          maxLength: 100
        deviceName:
          type: string
          minimum: 0
          maximum: 250
    UserSignature:
      type: object
      required:
        - vaultName
        - device
        - publicKey
        - transportPublicKey
        - signature
      properties:
        vaultName:
          type: string
          description: distributed vault, unique across the entire system
          minLength: 1
          maxLength: 1000
        device:
          $ref: '#/components/schemas/DeviceInfo'
        publicKey:
          $ref: '#/components/schemas/Base64EncodedText'
        transportPublicKey:
          $ref: '#/components/schemas/Base64EncodedText'
        signature:
          $ref: '#/components/schemas/Base64EncodedText'

    SerializedDsaKeyPair:
      type: object
      required:
        - keyPair
        - publicKey
      properties:
        keyPair:
          $ref: '#/components/schemas/Base64EncodedText'
        publicKey:
          $ref: '#/components/schemas/Base64EncodedText'


    SerializedTransportKeyPair:
      type: object
      required:
        - secretKey
        - publicKey
      properties:
        secretKey:
          $ref: '#/components/schemas/Base64EncodedText'
        publicKey:
          $ref: '#/components/schemas/Base64EncodedText'

    SerializedKeyManager:
      type: object
      required:
        - dsa
        - transport
      properties:
        dsa:
          $ref: '#/components/schemas/SerializedDsaKeyPair'
        transport:
          $ref: '#/components/schemas/SerializedTransportKeyPair'

    UserSecurityBox:
      type: object
      required:
        - vaultName
        - signature
        - keyManager
      properties:
        vaultName:
          type: string
          minLength: 1
        signature:
          $ref: '#/components/schemas/Base64EncodedText'
        keyManager:
          $ref: '#/components/schemas/SerializedKeyManager'

    # Encryption

    CommunicationChannel:
      type: object
      description: Represents virtual encrypted communication channel between two points.
      required:
        - sender
        - receiver
      properties:
        sender:
          $ref: '#/components/schemas/Base64EncodedText'
        receiver:
          $ref: '#/components/schemas/Base64EncodedText'

    AeadAuthData:
      type: object
      required:
        - associatedData
        - channel
        - nonce
      properties:
        associatedData:
          type: string
        channel:
          $ref: '#/components/schemas/CommunicationChannel'
        nonce:
          $ref: '#/components/schemas/Base64EncodedText'

    AeadCipherText:
      type: object
      required:
        - msg
        - authData
      properties:
        msg:
          $ref: '#/components/schemas/Base64EncodedText'
        authData:
          $ref: '#/components/schemas/AeadAuthData'

    AeadPlainText:
      type: object
      required:
        - msg
        - authData
      properties:
        msg:
          $ref: '#/components/schemas/Base64EncodedText'
        authData:
          $ref: '#/components/schemas/AeadAuthData'

    VaultDoc:
      type: object
      required:
        - vaultName
        - signatures
        - pendingJoins
        - declinedJoins
      properties:
        vaultName:
          type: string
          minLength: 1
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/UserSignature'
        pendingJoins:
          type: array
          items:
            $ref: '#/components/schemas/UserSignature'
        declinedJoins:
          type: array
          items:
            $ref: '#/components/schemas/UserSignature'
    MetaPasswordId:
      type: object
      required:
        - id
        - salt
        - name
      properties:
        id:
          description: SHA256 hash of a salt
          type: string
          minLength: 1
        salt:
          description: Random String up to 30 characters, must be unique
          type: string
          minLength: 1
        name:
          description: Human readable name given to the password
          type: string
          minLength: 1

    MetaPasswordDoc:
      type: object
      required:
        - id
        - vault
      properties:
        id:
          $ref: '#/components/schemas/MetaPasswordId'
        vault:
          $ref: '#/components/schemas/VaultDoc'
          description: 'We need to keep the entire vault here, because the vault can be changed (new members can appear some members can be deleted), then we will not be able to restore the password if we would have different members than in original vault'

    SecretDistributionType:
      type: string
      enum:
        - Split
        - Recover

    MetaPasswordRequest:
      type: object
      required:
        - userSig
        - metaPassword
      properties:
        userSig:
          description: Creator of the meta password record
          $ref: '#/components/schemas/UserSignature'
        metaPassword:
          description: meta information about password
          $ref: '#/components/schemas/MetaPasswordDoc'

    EncryptedMessage:
      type: object
      required:
        - receiver
        - encryptedText
      properties:
        receiver:
          description: "Message receiver who can decrypt message. We can't use a receiver from inside AeadCipherText because it's static and we can't know if a receiver send message back or it's the sender sending message."
          $ref: '#/components/schemas/UserSignature'
        encryptedText:
          description: Message text encrypted with receivers public key
          $ref: '#/components/schemas/AeadCipherText'

    SecretDistributionDocData:
      type: object
      required:
        - distributionType
        - metaPassword
        - secretMessage
      properties:
        distributionType:
          $ref: '#/components/schemas/SecretDistributionType'
        metaPassword:
          $ref: '#/components/schemas/MetaPasswordRequest'
        secretMessage:
          $ref: '#/components/schemas/EncryptedMessage'

    RegistrationStatus:
      type: string
      enum:
        - Registered
        - AlreadyExists

    JoinRequest:
      type: object
      required:
        - member
        - candidate
      properties:
        member:
          $ref: '#/components/schemas/UserSignature'
        candidate:
          $ref: '#/components/schemas/UserSignature'

    VaultInfoStatus:
      type: string
      description: |
        `Member`: Device is a member of a vault.
        `Pending`: Device is waiting to be added to a vault.
        `Declined`: Vault members declined to add a device into the vault.
        `NotFound`: Vault not found
        `Unknown`: Device can't get any information about the vault, because its signature is not in members or pending list
      enum:
        - Member
        - Pending
        - Declined
        - NotFound
        - Unknown

    VaultInfoData:
      properties:
        vaultInfo:
          $ref: '#/components/schemas/VaultInfoStatus'
        vault:
          $ref: '#/components/schemas/VaultDoc'

paths:
